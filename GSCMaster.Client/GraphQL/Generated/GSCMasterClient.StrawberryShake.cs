// <auto-generated/>
#nullable enable

namespace GSCMaster.Client.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemonResult : global::System.IEquatable<GetAllPokemonResult>, IGetAllPokemonResult
    {
        public GetAllPokemonResult(global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon> allPokemon)
        {
            AllPokemon = allPokemon;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon> AllPokemon { get; }

        public virtual global::System.Boolean Equals(GetAllPokemonResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllPokemon, other.AllPokemon));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPokemonResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var AllPokemon_elm in AllPokemon)
                {
                    hash ^= 397 * AllPokemon_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemon_AllPokemon_Pokemon : global::System.IEquatable<GetAllPokemon_AllPokemon_Pokemon>, IGetAllPokemon_AllPokemon_Pokemon
    {
        public GetAllPokemon_AllPokemon_Pokemon(global::System.Int32 nationalNumber, global::System.String name, global::GSCMaster.Client.GraphQL.Tier tier, global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_PrimaryType primaryType, global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_SecondaryType? secondaryType)
        {
            NationalNumber = nationalNumber;
            Name = name;
            Tier = tier;
            PrimaryType = primaryType;
            SecondaryType = secondaryType;
        }

        public global::System.Int32 NationalNumber { get; }

        public global::System.String Name { get; }

        public global::GSCMaster.Client.GraphQL.Tier Tier { get; }

        public global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_PrimaryType PrimaryType { get; }

        public global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_SecondaryType? SecondaryType { get; }

        public virtual global::System.Boolean Equals(GetAllPokemon_AllPokemon_Pokemon? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (NationalNumber == other.NationalNumber) && Name.Equals(other.Name) && Tier.Equals(other.Tier) && PrimaryType.Equals(other.PrimaryType) && ((SecondaryType is null && other.SecondaryType is null) || SecondaryType != null && SecondaryType.Equals(other.SecondaryType));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPokemon_AllPokemon_Pokemon)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * NationalNumber.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Tier.GetHashCode();
                hash ^= 397 * PrimaryType.GetHashCode();
                if (SecondaryType != null)
                {
                    hash ^= 397 * SecondaryType.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemon_AllPokemon_PrimaryType_Type : global::System.IEquatable<GetAllPokemon_AllPokemon_PrimaryType_Type>, IGetAllPokemon_AllPokemon_PrimaryType_Type
    {
        public GetAllPokemon_AllPokemon_PrimaryType_Type(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetAllPokemon_AllPokemon_PrimaryType_Type? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPokemon_AllPokemon_PrimaryType_Type)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemon_AllPokemon_SecondaryType_Type : global::System.IEquatable<GetAllPokemon_AllPokemon_SecondaryType_Type>, IGetAllPokemon_AllPokemon_SecondaryType_Type
    {
        public GetAllPokemon_AllPokemon_SecondaryType_Type(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetAllPokemon_AllPokemon_SecondaryType_Type? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPokemon_AllPokemon_SecondaryType_Type)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemonResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon> AllPokemon { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemon_AllPokemon
    {
        public global::System.Int32 NationalNumber { get; }

        public global::System.String Name { get; }

        public global::GSCMaster.Client.GraphQL.Tier Tier { get; }

        public global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_PrimaryType PrimaryType { get; }

        public global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_SecondaryType? SecondaryType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemon_AllPokemon_Pokemon : IGetAllPokemon_AllPokemon
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemon_AllPokemon_PrimaryType
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemon_AllPokemon_PrimaryType_Type : IGetAllPokemon_AllPokemon_PrimaryType
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemon_AllPokemon_SecondaryType
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemon_AllPokemon_SecondaryType_Type : IGetAllPokemon_AllPokemon_SecondaryType
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public enum Tier
    {
        Uber,
        Ou,
        Uubl,
        Uu,
        Nubl,
        Nu,
        Nfe,
        Lc
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class TierSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Tier>
    {
        public global::System.String TypeName => "Tier";
        public Tier Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "Uber" => Tier.Uber,
                "OU" => Tier.Ou,
                "UUBL" => Tier.Uubl,
                "UU" => Tier.Uu,
                "NUBL" => Tier.Nubl,
                "NU" => Tier.Nu,
                "NFE" => Tier.Nfe,
                "LC" => Tier.Lc,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                Tier.Uber => "Uber",
                Tier.Ou => "OU",
                Tier.Uubl => "UUBL",
                Tier.Uu => "UU",
                Tier.Nubl => "NUBL",
                Tier.Nu => "NU",
                Tier.Nfe => "NFE",
                Tier.Lc => "LC",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPokemon GraphQL operation
    /// <code>
    /// query GetAllPokemon {
    ///   allPokemon {
    ///     __typename
    ///     nationalNumber
    ///     name
    ///     tier
    ///     primaryType {
    ///       __typename
    ///       name
    ///     }
    ///     secondaryType {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemonQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllPokemonQueryDocument()
        {
        }

        public static GetAllPokemonQueryDocument Instance { get; } = new GetAllPokemonQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6b, 0x65, 0x6d, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "10698f485f3e73a92988fc66d8328002");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPokemon GraphQL operation
    /// <code>
    /// query GetAllPokemon {
    ///   allPokemon {
    ///     __typename
    ///     nationalNumber
    ///     name
    ///     tier
    ///     primaryType {
    ///       __typename
    ///       name
    ///     }
    ///     secondaryType {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemonQuery : global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllPokemonResult> _operationExecutor;
        public GetAllPokemonQuery(global::StrawberryShake.IOperationExecutor<IGetAllPokemonResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllPokemonResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPokemonResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPokemonResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllPokemonQueryDocument.Instance.Hash.Value, name: "GetAllPokemon", document: GetAllPokemonQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPokemon GraphQL operation
    /// <code>
    /// query GetAllPokemon {
    ///   allPokemon {
    ///     __typename
    ///     nationalNumber
    ///     name
    ///     tier
    ///     primaryType {
    ///       __typename
    ///       name
    ///     }
    ///     secondaryType {
    ///       __typename
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGetAllPokemonQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPokemonResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPokemonResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GSCMasterClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GSCMasterClient : global::GSCMaster.Client.GraphQL.IGSCMasterClient
    {
        private readonly global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery _getAllPokemon;
        public GSCMasterClient(global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery getAllPokemon)
        {
            _getAllPokemon = getAllPokemon ?? throw new global::System.ArgumentNullException(nameof(getAllPokemon));
        }

        public static global::System.String ClientName => "GSCMasterClient";
        public global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery GetAllPokemon => _getAllPokemon;
    }

    /// <summary>
    /// Represents the GSCMasterClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial interface IGSCMasterClient
    {
        global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery GetAllPokemon { get; }
    }
}

namespace GSCMaster.Client.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemonResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GSCMaster.Client.GraphQL.GetAllPokemonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllPokemonResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GSCMaster.Client.GraphQL.IGetAllPokemonResult);
        public GetAllPokemonResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllPokemonResultInfo info)
            {
                return new GetAllPokemonResult(MapNonNullableIGetAllPokemon_AllPokemonNonNullableArray(info.AllPokemon, snapshot));
            }

            throw new global::System.ArgumentException("GetAllPokemonResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon> MapNonNullableIGetAllPokemon_AllPokemonNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.State.PokemonData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var pokemons = new global::System.Collections.Generic.List<global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon>();
            foreach (global::GSCMaster.Client.GraphQL.State.PokemonData child in list)
            {
                pokemons.Add(MapNonNullableIGetAllPokemon_AllPokemon(child, snapshot));
            }

            return pokemons;
        }

        private global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon MapNonNullableIGetAllPokemon_AllPokemon(global::GSCMaster.Client.GraphQL.State.PokemonData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetAllPokemon_AllPokemon returnValue = default !;
            if (data.__typename.Equals("Pokemon", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAllPokemon_AllPokemon_Pokemon(data.NationalNumber ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Tier ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetAllPokemon_AllPokemon_PrimaryType(data.PrimaryType ?? throw new global::System.ArgumentNullException(), snapshot), MapIGetAllPokemon_AllPokemon_SecondaryType(data.SecondaryType, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_PrimaryType MapNonNullableIGetAllPokemon_AllPokemon_PrimaryType(global::GSCMaster.Client.GraphQL.State.TypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetAllPokemon_AllPokemon_PrimaryType returnValue = default !;
            if (data.__typename.Equals("Type", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAllPokemon_AllPokemon_PrimaryType_Type(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GSCMaster.Client.GraphQL.IGetAllPokemon_AllPokemon_SecondaryType? MapIGetAllPokemon_AllPokemon_SecondaryType(global::GSCMaster.Client.GraphQL.State.TypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllPokemon_AllPokemon_SecondaryType returnValue = default !;
            if (data?.__typename.Equals("Type", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllPokemon_AllPokemon_SecondaryType_Type(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemonResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllPokemonResultInfo(global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.State.PokemonData> allPokemon, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllPokemon = allPokemon;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.State.PokemonData> AllPokemon { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllPokemonResultInfo(AllPokemon, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GetAllPokemonBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GSCMaster.Client.GraphQL.IGetAllPokemonResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GSCMaster.Client.GraphQL.Tier> _tierParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetAllPokemonBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GSCMaster.Client.GraphQL.IGetAllPokemonResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _tierParser = serializerResolver.GetLeafValueParser<global::System.String, global::GSCMaster.Client.GraphQL.Tier>("Tier") ?? throw new global::System.ArgumentException("No serializer for type `Tier` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllPokemonResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllPokemonResult Result, GetAllPokemonResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAllPokemonResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllPokemonResult, GetAllPokemonResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllPokemonResultInfo(DeserializeNonNullableIGetAllPokemon_AllPokemonNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allPokemon")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GSCMaster.Client.GraphQL.State.PokemonData> DeserializeNonNullableIGetAllPokemon_AllPokemonNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var pokemons = new global::System.Collections.Generic.List<global::GSCMaster.Client.GraphQL.State.PokemonData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                pokemons.Add(DeserializeNonNullableIGetAllPokemon_AllPokemon(child));
            }

            return pokemons;
        }

        private global::GSCMaster.Client.GraphQL.State.PokemonData DeserializeNonNullableIGetAllPokemon_AllPokemon(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Pokemon", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GSCMaster.Client.GraphQL.State.PokemonData(typename, nationalNumber: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nationalNumber")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), tier: DeserializeNonNullableTier(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tier")), primaryType: DeserializeNonNullableIGetAllPokemon_AllPokemon_PrimaryType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryType")), secondaryType: DeserializeIGetAllPokemon_AllPokemon_SecondaryType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "secondaryType")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GSCMaster.Client.GraphQL.Tier DeserializeNonNullableTier(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _tierParser.Parse(obj.Value.GetString()!);
        }

        private global::GSCMaster.Client.GraphQL.State.TypeData DeserializeNonNullableIGetAllPokemon_AllPokemon_PrimaryType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Type", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GSCMaster.Client.GraphQL.State.TypeData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::GSCMaster.Client.GraphQL.State.TypeData? DeserializeIGetAllPokemon_AllPokemon_SecondaryType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Type", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GSCMaster.Client.GraphQL.State.TypeData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class PokemonData
    {
        public PokemonData(global::System.String __typename, global::System.Int32? nationalNumber = default !, global::System.String? name = default !, global::GSCMaster.Client.GraphQL.Tier? tier = default !, global::GSCMaster.Client.GraphQL.State.TypeData? primaryType = default !, global::GSCMaster.Client.GraphQL.State.TypeData? secondaryType = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            NationalNumber = nationalNumber;
            Name = name;
            Tier = tier;
            PrimaryType = primaryType;
            SecondaryType = secondaryType;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? NationalNumber { get; }

        public global::System.String? Name { get; }

        public global::GSCMaster.Client.GraphQL.Tier? Tier { get; }

        public global::GSCMaster.Client.GraphQL.State.TypeData? PrimaryType { get; }

        public global::GSCMaster.Client.GraphQL.State.TypeData? SecondaryType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class TypeData
    {
        public TypeData(global::System.String __typename, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GSCMasterClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public partial class GSCMasterClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GSCMasterClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.12.1.0")]
    public static partial class GSCMasterClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GSCMaster.Client.GraphQL.State.GSCMasterClientStoreAccessor> AddGSCMasterClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GSCMaster.Client.GraphQL.State.GSCMasterClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GSCMaster.Client.GraphQL.GetAllPokemonQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GSCMaster.Client.GraphQL.GSCMasterClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GSCMaster.Client.GraphQL.IGSCMasterClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GSCMaster.Client.GraphQL.State.GSCMasterClientStoreAccessor>("GSCMasterClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GSCMasterClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GSCMaster.Client.GraphQL.TierSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>, global::GSCMaster.Client.GraphQL.State.GetAllPokemonResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>, global::GSCMaster.Client.GraphQL.State.GetAllPokemonBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GSCMaster.Client.GraphQL.IGetAllPokemonResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GSCMaster.Client.GraphQL.GetAllPokemonQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GSCMaster.Client.GraphQL.IGetAllPokemonQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GSCMaster.Client.GraphQL.GetAllPokemonQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GSCMaster.Client.GraphQL.State.GSCMasterClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GSCMaster.Client.GraphQL.GSCMasterClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GSCMaster.Client.GraphQL.IGSCMasterClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GSCMaster.Client.GraphQL.GSCMasterClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
